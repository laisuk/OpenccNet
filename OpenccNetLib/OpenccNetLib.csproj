<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>

        <!-- Package Information for NuGet -->
        <PackageId>OpenccNetLib</PackageId>
        <Version>1.2.1</Version>
        <Authors>laisuk</Authors>
        <Description>
            OpenCC .NET library for Chinese text conversion between Traditional and Simplified Chinese.
            Supports high-performance dictionary-based segment replacement with support for both CLI and GUI tools.
        </Description>
        <PackageTags>opencc;chinese;conversion;traditional;simplified</PackageTags>
        <RepositoryUrl>https://github.com/laisuk/OpenccNet</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageProjectUrl>https://github.com/laisuk/OpenccNet</PackageProjectUrl>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
        <Title>OpenccNet Library</Title>
        <PackageReleaseNotes>OpenccNetLib v1.2.1

            This release focuses on performance, code simplification, and astral-safe text handling.

            Highlights
            - Introduced StarterUnion with UnionKey-based caching (ConversionPlanCache) → fewer allocations and faster startup.
            - Added BuildFromStarterMasks() to construct StarterUnion directly from precomputed per-starter length masks,
            eliminating full key scans and saving ~10 ms on large dictionary builds.
            - O(1) per-starter metadata: 64-bit length mask + minLen + cap → skips impossible probe lengths instantly.
            - Astral-safe GetAt(c0, c1, hasSecond, …) detects surrogate pairs, clamps len == 1, and ensures full non-BMP safety.
            - Shared high-surrogate (c0) indexing for astral characters (st/ts_characters) → dense, cache-friendly tables.
            - Simplified bit helpers (LowestLen / HighestLen) with compact inlined loops — faster than BitOperations for small masks.
            - Corrected longest-match behavior; single-grapheme fast path triggers only when no longer candidates exist.
            - .NET Standard 2.0-compatible code throughout: removed “??=”, static locals, and lambda captures.

            Project: https://github.com/laisuk/OpenccNet
        </PackageReleaseNotes>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <FileVersion>1.2.1.0</FileVersion>
        <PackageIcon>icon.png</PackageIcon>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="PeterO.Cbor" Version="4.5.5"/>
        <PackageReference Include="System.Memory" Version="4.6.3"/>
        <PackageReference Include="System.Text.Json" Version="8.0.5"/>
        <PackageReference Include="ZstdSharp.Port" Version="0.8.6"/>
    </ItemGroup>

    <!-- Include icon file in package -->
    <ItemGroup>
        <None Include="Images/icon.png" Pack="true" PackagePath="/"/>
    </ItemGroup>

    <!-- Include README in package -->
    <ItemGroup>
        <None Include="../README.md" Pack="true" PackagePath="/"/>
    </ItemGroup>

    <!-- Dictionary files - included in package and copied to output -->
    <ItemGroup>
        <!-- Include all files under dicts (with extensions) -->
        <None Include="dicts\**\*.*">
            <Pack>true</Pack>
            <PackagePath>contentFiles\any\any\dicts\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
            <PackageCopyToOutput>true</PackageCopyToOutput>
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>
</Project>